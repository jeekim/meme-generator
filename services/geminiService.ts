
import { GoogleGenAI, Type, Modality } from "@google/genai";
import type { MemeCaption } from '../types';

if (!process.env.API_KEY) {
    throw new Error("API_KEY environment variable not set");
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

async function fileToGenerativePart(base64Data: string) {
    const dataPart = base64Data.split(',')[1];
    const mimeType = base64Data.split(';')[0].split(':')[1];
    return {
        inlineData: {
            data: dataPart,
            mimeType,
        },
    };
}

export async function generateCaptions(imageBase64: string): Promise<MemeCaption[]> {
    const imagePart = await fileToGenerativePart(imageBase64);
    
    const prompt = `You are a world-class meme generator. Based on the provided image, create 5 funny and viral-worthy meme captions.
Each caption should have a top text and a bottom text.
Return your response as a JSON object with a single key "captions", which is an array of objects. Each object in the array should have "topText" and "bottomText" keys.
Be creative and hilarious. The captions should be short and punchy.`;

    const schema = {
        type: Type.OBJECT,
        properties: {
            captions: {
                type: Type.ARRAY,
                items: {
                    type: Type.OBJECT,
                    properties: {
                        topText: { type: Type.STRING },
                        bottomText: { type: Type.STRING },
                    },
                    required: ['topText', 'bottomText'],
                },
            },
        },
        required: ['captions'],
    };

    const response = await ai.models.generateContent({
        model: 'gemini-2.5-flash',
        contents: { parts: [imagePart, { text: prompt }] },
        config: {
            responseMimeType: "application/json",
            responseSchema: schema,
        },
    });

    const jsonText = response.text.trim();
    const parsed = JSON.parse(jsonText);
    return parsed.captions;
}


export async function editImage(imageBase64: string, prompt: string): Promise<string> {
    const imagePart = await fileToGenerativePart(imageBase64);

    const response = await ai.models.generateContent({
        model: 'gemini-2.5-flash-image',
        contents: {
            parts: [
                imagePart,
                { text: prompt },
            ],
        },
        config: {
            responseModalities: [Modality.IMAGE],
        },
    });

    const firstPart = response.candidates?.[0]?.content?.parts?.[0];
    if (firstPart && firstPart.inlineData) {
        return firstPart.inlineData.data;
    }

    throw new Error("No image was generated by the API.");
}
